package com.example.myapplication;

import androidx.appcompat.app.AppCompatActivity;

import android.app.Activity;
import android.content.res.AssetFileDescriptor;
import android.graphics.Color;
import android.os.Bundle;
import android.util.Log;
import android.util.TimingLogger;
import android.view.View;
import android.widget.TextView;

import com.github.mikephil.charting.charts.LineChart;
import com.github.mikephil.charting.data.Entry;
import com.github.mikephil.charting.data.LineData;
import com.github.mikephil.charting.data.LineDataSet;
import com.github.mikephil.charting.interfaces.datasets.ILineDataSet;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.nio.MappedByteBuffer;
import java.nio.channels.FileChannel;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.io.FileReader;

import com.opencsv.CSVReader;
import com.opencsv.bean.CsvBindAndJoinByPosition;
import com.opencsv.bean.CsvBindByPosition;
import com.opencsv.bean.CsvToBeanBuilder;
import com.opencsv.exceptions.CsvException;

import org.apache.commons.collections4.MultiValuedMap;
import org.tensorflow.lite.Interpreter;

class Hearbeat {

    @CsvBindByPosition(position = 260)
    private int label;

    @CsvBindAndJoinByPosition(position = "0-259", elementType = float.class)
    MultiValuedMap<Integer, Float> signal;

    // Getters and setters go here
}


public class MainActivity extends AppCompatActivity {

    private LineChart chart;
    private TextView tv1, tv2;

    double[][] X_test = {
        {-0.185,-0.19,-0.185,-0.21,-0.23,-0.245,-0.235,-0.22,-0.22,-0.24,-0.255,-0.25,-0.245,-0.22,-0.235,-0.245,-0.26,-0.245,-0.235,-0.215,-0.21,-0.23,-0.245,-0.225,-0.22,-0.225,-0.235,-0.24,-0.25,-0.235,-0.215,-0.205,-0.225,-0.24,-0.23,-0.24,-0.23,-0.22,-0.235,-0.25,-0.26,-0.25,-0.225,-0.21,-0.22,-0.235,-0.245,-0.245,-0.24,-0.23,-0.255,-0.25,-0.25,-0.24,-0.22,-0.21,-0.21,-0.24,-0.225,-0.215,-0.165,-0.135,-0.135,-0.15,-0.18,-0.17,-0.15,-0.135,-0.135,-0.16,-0.165,-0.16,-0.17,-0.15,-0.165,-0.17,-0.19,-0.175,-0.18,-0.165,-0.185,-0.205,-0.215,-0.22,-0.205,-0.195,-0.2,-0.22,-0.22,-0.2,-0.19,-0.195,-0.21,-0.22,-0.245,-0.265,-0.275,-0.265,-0.28,-0.295,-0.29,-0.28,-0.27,-0.265,-0.275,-0.265,-0.26,-0.26,-0.26,-0.235,-0.26,-0.27,-0.285,-0.275,-0.265,-0.265,-0.275,-0.29,-0.31,-0.33,-0.35,-0.35,-0.31,-0.245,-0.135,-0.005,0.195,0.415,0.665,0.89,1.075,1.125,1.02,0.75,0.36,-0.08,-0.53,-0.845,-0.92,-0.845,-0.745,-0.63,-0.535,-0.445,-0.365,-0.33,-0.325,-0.31,-0.3,-0.29,-0.285,-0.275,-0.28,-0.29,-0.295,-0.295,-0.275,-0.26,-0.265,-0.275,-0.275,-0.275,-0.26,-0.24,-0.24,-0.25,-0.255,-0.255,-0.235,-0.225,-0.225,-0.24,-0.245,-0.245,-0.22,-0.195,-0.19,-0.2,-0.205,-0.18,-0.16,-0.16,-0.16,-0.17,-0.165,-0.145,-0.13,-0.12,-0.12,-0.13,-0.125,-0.105,-0.075,-0.06,-0.05,-0.055,-0.055,-0.035,-0.01,0.015,0.02,0.02,0.02,0.035,0.04,0.05,0.055,0.05,0.045,0.065,0.095,0.095,0.1,0.08,0.08,0.095,0.105,0.1,0.08,0.08,0.065,0.06,0.07,0.06,0.045,0.03,0.01,0.0,-0.005,-0.02,-0.045,-0.07,-0.09,-0.09,-0.085,-0.09,-0.105,-0.14,-0.155,-0.16,-0.155,-0.18,-0.19,-0.22,-0.235,-0.22,-0.21,-0.2,-0.22,-0.225,-0.22,-0.225,-0.215,-0.21,-0.22,-0.235,-0.245,-0.235,-0.235,-0.225},
        {0.345,0.38,0.39,0.395,0.385,0.41,0.42,0.445,0.455,0.445,0.43,0.435,0.455,0.47,0.455,0.44,0.435,0.455,0.495,0.54,0.56,0.56,0.545,0.56,0.58,0.6,0.62,0.63,0.62,0.62,0.62,0.635,0.66,0.675,0.68,0.685,0.725,0.745,0.75,0.75,0.735,0.73,0.75,0.77,0.775,0.775,0.74,0.72,0.7,0.685,0.675,0.655,0.62,0.585,0.555,0.56,0.545,0.53,0.51,0.505,0.515,0.535,0.52,0.51,0.505,0.5,0.495,0.51,0.535,0.55,0.545,0.53,0.555,0.58,0.59,0.565,0.555,0.58,0.64,0.695,0.705,0.71,0.695,0.7,0.695,0.705,0.695,0.675,0.645,0.62,0.625,0.61,0.585,0.55,0.51,0.475,0.485,0.51,0.545,0.55,0.52,0.495,0.485,0.48,0.475,0.44,0.43,0.41,0.415,0.47,0.505,0.495,0.45,0.42,0.43,0.435,0.41,0.375,0.33,0.3,0.28,0.275,0.32,0.43,0.585,0.79,1.02,1.28,1.53,1.725,1.87,1.925,1.795,1.465,1.11,0.75,0.475,0.36,0.35,0.4,0.43,0.425,0.43,0.445,0.455,0.48,0.47,0.46,0.46,0.485,0.5,0.515,0.5,0.475,0.485,0.49,0.515,0.53,0.555,0.6,0.605,0.6,0.57,0.585,0.565,0.57,0.545,0.525,0.535,0.575,0.585,0.585,0.56,0.56,0.555,0.575,0.585,0.6,0.595,0.565,0.58,0.6,0.605,0.605,0.605,0.615,0.645,0.685,0.71,0.7,0.7,0.695,0.705,0.745,0.755,0.775,0.78,0.78,0.78,0.79,0.81,0.83,0.825,0.83,0.84,0.86,0.87,0.875,0.88,0.87,0.89,0.92,0.935,0.93,0.915,0.92,0.91,0.91,0.94,0.955,0.94,0.915,0.915,0.95,0.94,0.905,0.875,0.865,0.86,0.845,0.815,0.8,0.775,0.77,0.78,0.76,0.725,0.71,0.7,0.695,0.71,0.695,0.69,0.685,0.67,0.65,0.65,0.66,0.645,0.645,0.66,0.695,0.72,0.75,0.77,0.79,0.8,0.81,0.845,0.88},
        {0.04,0.035,0.02,0.005,0.02,0.03,0.025,0.015,0.025,0.025,0.03,0.045,0.06,0.05,0.045,0.035,0.045,0.065,0.08,0.075,0.075,0.075,0.075,0.095,0.095,0.09,0.08,0.09,0.105,0.13,0.14,0.145,0.145,0.16,0.17,0.185,0.18,0.15,0.145,0.125,0.125,0.125,0.13,0.125,0.105,0.1,0.11,0.115,0.11,0.1,0.065,0.03,0.02,0.03,0.025,0.005,-0.025,-0.045,-0.04,-0.035,-0.035,-0.055,-0.06,-0.075,-0.065,-0.05,-0.065,-0.07,-0.1,-0.115,-0.115,-0.095,-0.1,-0.105,-0.12,-0.135,-0.13,-0.11,-0.11,-0.125,-0.14,-0.155,-0.145,-0.135,-0.13,-0.135,-0.14,-0.145,-0.145,-0.14,-0.125,-0.13,-0.135,-0.14,-0.135,-0.115,-0.105,-0.125,-0.125,-0.135,-0.13,-0.11,-0.085,-0.09,-0.1,-0.1,-0.11,-0.08,-0.08,-0.095,-0.095,-0.095,-0.07,-0.065,-0.055,-0.06,-0.08,-0.095,-0.09,-0.095,-0.1,-0.095,-0.07,0.0,0.105,0.245,0.395,0.525,0.595,0.62,0.6,0.515,0.38,0.265,0.19,0.145,0.135,0.145,0.13,0.1,0.07,0.025,0.03,0.02,0.015,-0.015,-0.02,-0.04,-0.05,-0.035,-0.025,-0.05,-0.075,-0.075,-0.055,-0.045,-0.04,-0.04,-0.055,-0.06,-0.05,-0.06,-0.055,-0.04,-0.05,-0.07,-0.045,-0.035,-0.03,-0.03,-0.06,-0.075,-0.065,-0.045,-0.04,-0.055,-0.065,-0.065,-0.055,-0.045,-0.045,-0.065,-0.08,-0.085,-0.085,-0.075,-0.05,-0.06,-0.085,-0.095,-0.095,-0.09,-0.08,-0.08,-0.08,-0.09,-0.075,-0.09,-0.11,-0.12,-0.15,-0.13,-0.13,-0.105,-0.115,-0.13,-0.14,-0.165,-0.15,-0.145,-0.145,-0.175,-0.205,-0.2,-0.215,-0.2,-0.195,-0.21,-0.23,-0.23,-0.23,-0.215,-0.215,-0.22,-0.235,-0.245,-0.235,-0.225,-0.21,-0.21,-0.22,-0.235,-0.23,-0.215,-0.215,-0.22,-0.215,-0.215,-0.195,-0.2,-0.195,-0.185,-0.195,-0.215,-0.195,-0.175,-0.17,-0.175,-0.185,-0.195,-0.18,-0.17,-0.16,-0.175,-0.185,-0.185,-0.17,-0.16,-0.135,-0.15},
        {-0.325,-0.315,-0.295,-0.305,-0.33,-0.34,-0.32,-0.315,-0.31,-0.32,-0.34,-0.345,-0.345,-0.325,-0.325,-0.33,-0.355,-0.365,-0.36,-0.37,-0.32,-0.33,-0.34,-0.355,-0.35,-0.345,-0.32,-0.335,-0.35,-0.355,-0.36,-0.345,-0.325,-0.35,-0.36,-0.36,-0.355,-0.345,-0.335,-0.345,-0.36,-0.37,-0.35,-0.355,-0.33,-0.325,-0.335,-0.335,-0.325,-0.3,-0.285,-0.295,-0.305,-0.32,-0.31,-0.29,-0.275,-0.27,-0.275,-0.285,-0.275,-0.27,-0.275,-0.285,-0.295,-0.31,-0.31,-0.32,-0.31,-0.33,-0.345,-0.34,-0.345,-0.325,-0.315,-0.32,-0.335,-0.345,-0.325,-0.325,-0.295,-0.3,-0.305,-0.33,-0.335,-0.33,-0.335,-0.345,-0.365,-0.365,-0.36,-0.34,-0.35,-0.345,-0.36,-0.38,-0.37,-0.35,-0.355,-0.37,-0.37,-0.375,-0.355,-0.36,-0.34,-0.34,-0.36,-0.365,-0.375,-0.35,-0.335,-0.325,-0.355,-0.375,-0.35,-0.32,-0.285,-0.275,-0.275,-0.255,-0.22,-0.195,-0.22,-0.275,-0.32,-0.35,-0.36,-0.395,-0.46,-0.54,-0.555,-0.53,-0.46,-0.31,-0.145,0.005,0.065,0.01,-0.2,-0.455,-0.645,-0.69,-0.645,-0.565,-0.45,-0.365,-0.32,-0.315,-0.31,-0.325,-0.305,-0.285,-0.285,-0.29,-0.3,-0.285,-0.27,-0.25,-0.245,-0.24,-0.25,-0.245,-0.245,-0.22,-0.205,-0.21,-0.235,-0.23,-0.23,-0.205,-0.185,-0.205,-0.22,-0.22,-0.225,-0.21,-0.19,-0.195,-0.21,-0.215,-0.225,-0.195,-0.185,-0.185,-0.2,-0.195,-0.19,-0.175,-0.17,-0.19,-0.175,-0.19,-0.175,-0.155,-0.145,-0.15,-0.18,-0.165,-0.155,-0.15,-0.12,-0.135,-0.16,-0.165,-0.15,-0.14,-0.1,-0.115,-0.11,-0.11,-0.095,-0.105,-0.065,-0.07,-0.075,-0.085,-0.065,-0.05,-0.03,-0.035,-0.04,-0.04,-0.015,0.0,0.005,0.0,0.005,-0.005,0.015,0.02,0.05,0.03,0.025,0.015,0.03,0.04,0.05,0.055,0.04,0.02,0.02,0.025,0.03,0.01,-0.02,-0.035,-0.045,-0.04,-0.045,-0.05,-0.09,-0.105,-0.115,-0.12,-0.105,-0.12,-0.135,-0.155,-0.165,-0.17},
        {-0.75,-0.75,-0.745,-0.74,-0.705,-0.685,-0.685,-0.685,-0.685,-0.7,-0.675,-0.665,-0.655,-0.645,-0.65,-0.635,-0.625,-0.59,-0.57,-0.575,-0.585,-0.59,-0.575,-0.565,-0.565,-0.59,-0.61,-0.625,-0.64,-0.635,-0.655,-0.68,-0.705,-0.725,-0.73,-0.74,-0.735,-0.76,-0.79,-0.815,-0.815,-0.805,-0.8,-0.84,-0.87,-0.88,-0.86,-0.845,-0.845,-0.84,-0.85,-0.88,-0.87,-0.85,-0.845,-0.85,-0.87,-0.895,-0.89,-0.85,-0.845,-0.85,-0.86,-0.88,-0.89,-0.86,-0.835,-0.835,-0.845,-0.865,-0.865,-0.855,-0.84,-0.835,-0.85,-0.86,-0.865,-0.84,-0.83,-0.85,-0.84,-0.84,-0.84,-0.815,-0.79,-0.77,-0.77,-0.755,-0.735,-0.735,-0.715,-0.705,-0.69,-0.675,-0.665,-0.655,-0.665,-0.665,-0.69,-0.69,-0.685,-0.67,-0.64,-0.655,-0.685,-0.705,-0.71,-0.685,-0.665,-0.675,-0.625,-0.615,-0.565,-0.505,-0.46,-0.385,-0.345,-0.28,-0.2,-0.12,-0.03,0.04,0.085,0.175,0.275,0.395,0.48,0.545,0.615,0.7,0.73,0.73,0.705,0.655,0.59,0.525,0.47,0.435,0.395,0.36,0.33,0.29,0.285,0.27,0.265,0.25,0.235,0.215,0.18,0.13,0.07,0.005,-0.125,-0.305,-0.515,-0.705,-0.89,-0.985,-1.075,-1.12,-1.145,-1.135,-1.15,-1.16,-1.21,-1.22,-1.215,-1.215,-1.22,-1.235,-1.27,-1.29,-1.295,-1.3,-1.29,-1.295,-1.325,-1.35,-1.37,-1.365,-1.365,-1.385,-1.395,-1.405,-1.42,-1.41,-1.405,-1.415,-1.42,-1.445,-1.46,-1.455,-1.47,-1.49,-1.5,-1.525,-1.54,-1.53,-1.545,-1.56,-1.565,-1.59,-1.575,-1.575,-1.565,-1.58,-1.6,-1.615,-1.615,-1.61,-1.62,-1.62,-1.625,-1.62,-1.61,-1.585,-1.575,-1.555,-1.55,-1.54,-1.495,-1.46,-1.46,-1.435,-1.43,-1.39,-1.355,-1.32,-1.285,-1.255,-1.24,-1.235,-1.205,-1.175,-1.13,-1.095,-1.085,-1.06,-1.05,-1.015,-0.98,-0.985,-0.99,-1.0,-0.985,-0.975,-0.975,-0.975,-0.985,-0.99,-0.985,-0.95,-0.945,-0.935,-0.96,-0.98,-0.975,-0.94,-0.935,-0.935},
        {-0.335,-0.335,-0.325,-0.32,-0.31,-0.295,-0.295,-0.29,-0.265,-0.245,-0.24,-0.22,-0.18,-0.135,-0.14,-0.185,-0.23,-0.23,-0.2,-0.2,-0.205,-0.225,-0.225,-0.17,-0.115,-0.075,-0.105,-0.175,-0.24,-0.235,-0.19,-0.155,-0.135,-0.13,-0.15,-0.14,-0.125,-0.11,-0.095,-0.075,-0.075,-0.06,-0.08,-0.09,-0.09,-0.095,-0.1,-0.09,-0.1,-0.12,-0.135,-0.135,-0.155,-0.135,-0.12,-0.095,-0.095,-0.1,-0.135,-0.14,-0.145,-0.125,-0.115,-0.12,-0.12,-0.1,-0.09,-0.1,-0.105,-0.11,-0.095,-0.075,-0.06,-0.095,-0.135,-0.165,-0.17,-0.145,-0.15,-0.165,-0.17,-0.17,-0.165,-0.16,-0.18,-0.18,-0.145,-0.12,-0.13,-0.14,-0.135,-0.1,-0.085,-0.085,-0.085,-0.1,-0.12,-0.12,-0.095,-0.095,-0.12,-0.125,-0.095,-0.045,0.0,0.025,0.05,0.075,0.075,0.075,0.055,0.055,0.055,0.06,0.06,0.085,0.095,0.075,0.055,0.03,-0.045,-0.205,-0.46,-0.82,-1.22,-1.56,-1.77,-1.905,-1.945,-1.965,-1.985,-1.96,-1.91,-1.835,-1.72,-1.615,-1.54,-1.46,-1.37,-1.265,-1.155,-1.06,-1.01,-0.955,-0.895,-0.81,-0.76,-0.73,-0.665,-0.58,-0.515,-0.485,-0.45,-0.385,-0.34,-0.275,-0.215,-0.14,-0.055,0.02,0.075,0.1,0.095,0.1,0.09,0.135,0.195,0.26,0.305,0.325,0.32,0.3,0.295,0.315,0.34,0.405,0.44,0.435,0.395,0.405,0.435,0.45,0.465,0.485,0.505,0.525,0.53,0.53,0.545,0.575,0.58,0.575,0.58,0.58,0.6,0.635,0.64,0.65,0.665,0.665,0.635,0.615,0.63,0.67,0.675,0.65,0.625,0.62,0.61,0.61,0.585,0.57,0.56,0.545,0.525,0.495,0.495,0.52,0.535,0.495,0.44,0.395,0.355,0.355,0.34,0.315,0.265,0.235,0.225,0.225,0.235,0.23,0.205,0.16,0.15,0.145,0.12,0.085,0.065,0.08,0.08,0.075,0.04,0.015,0.005,0.005,0.005,0.025,0.01,-0.045,-0.085,-0.07,-0.035,-0.02,-0.07,-0.14,-0.16,-0.13,-0.08,-0.06},
        {-0.23,-0.225,-0.22,-0.225,-0.235,-0.235,-0.235,-0.23,-0.215,-0.22,-0.225,-0.23,-0.22,-0.21,-0.21,-0.21,-0.225,-0.24,-0.215,-0.2,-0.195,-0.195,-0.2,-0.22,-0.205,-0.205,-0.2,-0.2,-0.215,-0.215,-0.215,-0.2,-0.2,-0.2,-0.2,-0.21,-0.2,-0.2,-0.2,-0.2,-0.21,-0.22,-0.205,-0.195,-0.195,-0.195,-0.2,-0.205,-0.185,-0.17,-0.165,-0.155,-0.16,-0.155,-0.135,-0.13,-0.12,-0.12,-0.125,-0.115,-0.11,-0.095,-0.09,-0.08,-0.08,-0.09,-0.1,-0.105,-0.1,-0.105,-0.115,-0.13,-0.125,-0.125,-0.15,-0.16,-0.175,-0.18,-0.185,-0.19,-0.195,-0.215,-0.23,-0.23,-0.225,-0.22,-0.22,-0.225,-0.235,-0.23,-0.23,-0.21,-0.215,-0.215,-0.225,-0.235,-0.23,-0.22,-0.22,-0.22,-0.23,-0.24,-0.24,-0.23,-0.225,-0.225,-0.23,-0.23,-0.22,-0.22,-0.21,-0.215,-0.225,-0.225,-0.21,-0.19,-0.185,-0.18,-0.17,-0.14,-0.11,-0.065,0.0,0.095,0.2,0.32,0.44,0.565,0.66,0.77,0.875,0.97,0.955,0.845,0.645,0.415,0.21,0.04,-0.085,-0.18,-0.26,-0.285,-0.27,-0.235,-0.19,-0.17,-0.17,-0.18,-0.195,-0.205,-0.205,-0.21,-0.21,-0.215,-0.235,-0.24,-0.225,-0.22,-0.225,-0.22,-0.235,-0.23,-0.225,-0.21,-0.21,-0.22,-0.235,-0.24,-0.235,-0.225,-0.22,-0.215,-0.235,-0.24,-0.225,-0.23,-0.22,-0.225,-0.225,-0.22,-0.21,-0.205,-0.205,-0.21,-0.205,-0.21,-0.2,-0.205,-0.2,-0.195,-0.195,-0.195,-0.19,-0.18,-0.175,-0.175,-0.175,-0.175,-0.165,-0.165,-0.16,-0.17,-0.165,-0.155,-0.15,-0.14,-0.13,-0.13,-0.13,-0.12,-0.115,-0.105,-0.105,-0.11,-0.12,-0.1,-0.085,-0.085,-0.085,-0.07,-0.075,-0.07,-0.06,-0.05,-0.05,-0.04,-0.05,-0.045,-0.035,-0.025,-0.02,-0.015,-0.015,0.0,0.01,0.02,0.02,0.025,0.03,0.025,0.025,0.035,0.025,0.01,0.0,0.0,0.0,-0.005,-0.015,-0.035,-0.045,-0.065,-0.055,-0.06,-0.07,-0.085,-0.1,-0.11,-0.11,-0.105},
        {-0.225,-0.22,-0.23,-0.23,-0.24,-0.225,-0.225,-0.215,-0.22,-0.23,-0.235,-0.235,-0.225,-0.225,-0.215,-0.235,-0.235,-0.23,-0.225,-0.215,-0.22,-0.225,-0.225,-0.225,-0.235,-0.22,-0.215,-0.225,-0.235,-0.225,-0.215,-0.2,-0.205,-0.21,-0.22,-0.22,-0.215,-0.21,-0.215,-0.22,-0.23,-0.22,-0.21,-0.215,-0.215,-0.215,-0.215,-0.21,-0.205,-0.2,-0.195,-0.195,-0.2,-0.18,-0.17,-0.16,-0.15,-0.16,-0.165,-0.15,-0.13,-0.125,-0.115,-0.125,-0.14,-0.125,-0.105,-0.1,-0.105,-0.115,-0.125,-0.13,-0.12,-0.125,-0.13,-0.145,-0.15,-0.145,-0.14,-0.15,-0.16,-0.175,-0.19,-0.19,-0.195,-0.19,-0.2,-0.205,-0.23,-0.22,-0.22,-0.21,-0.22,-0.235,-0.23,-0.235,-0.23,-0.22,-0.22,-0.225,-0.24,-0.22,-0.23,-0.215,-0.215,-0.225,-0.235,-0.23,-0.235,-0.215,-0.215,-0.215,-0.22,-0.21,-0.2,-0.195,-0.18,-0.16,-0.15,-0.135,-0.115,-0.08,-0.02,0.07,0.185,0.32,0.45,0.57,0.675,0.775,0.885,0.965,0.965,0.845,0.645,0.405,0.205,0.04,-0.085,-0.2,-0.28,-0.295,-0.26,-0.205,-0.17,-0.17,-0.185,-0.195,-0.22,-0.22,-0.23,-0.225,-0.215,-0.225,-0.235,-0.24,-0.23,-0.225,-0.23,-0.235,-0.24,-0.245,-0.245,-0.235,-0.22,-0.215,-0.24,-0.23,-0.22,-0.21,-0.2,-0.22,-0.225,-0.215,-0.205,-0.19,-0.195,-0.2,-0.21,-0.205,-0.18,-0.19,-0.195,-0.19,-0.195,-0.19,-0.17,-0.18,-0.18,-0.18,-0.19,-0.175,-0.165,-0.155,-0.155,-0.16,-0.165,-0.155,-0.14,-0.125,-0.125,-0.125,-0.135,-0.115,-0.1,-0.09,-0.08,-0.09,-0.085,-0.07,-0.06,-0.04,-0.045,-0.035,-0.04,-0.025,-0.01,-0.005,0.005,-0.005,0.0,0.01,0.025,0.03,0.045,0.035,0.035,0.035,0.04,0.05,0.045,0.05,0.03,0.035,0.035,0.045,0.03,0.01,-0.005,-0.015,-0.02,-0.02,-0.035,-0.055,-0.07,-0.085,-0.08,-0.095,-0.095,-0.115,-0.125,-0.135,-0.125,-0.13,-0.14,-0.15,-0.17,-0.155,-0.16,-0.155},
        {-0.135,-0.15,-0.15,-0.135,-0.13,-0.145,-0.16,-0.155,-0.14,-0.145,-0.15,-0.15,-0.17,-0.16,-0.15,-0.145,-0.145,-0.17,-0.18,-0.175,-0.17,-0.145,-0.15,-0.15,-0.16,-0.17,-0.16,-0.145,-0.13,-0.14,-0.175,-0.175,-0.175,-0.17,-0.145,-0.155,-0.17,-0.19,-0.185,-0.17,-0.17,-0.165,-0.175,-0.195,-0.175,-0.16,-0.16,-0.16,-0.165,-0.165,-0.16,-0.16,-0.145,-0.155,-0.165,-0.16,-0.145,-0.135,-0.13,-0.145,-0.115,-0.105,-0.09,-0.07,-0.06,-0.065,-0.07,-0.065,-0.075,-0.08,-0.085,-0.085,-0.105,-0.105,-0.11,-0.105,-0.095,-0.13,-0.145,-0.135,-0.125,-0.125,-0.125,-0.135,-0.14,-0.16,-0.185,-0.16,-0.165,-0.16,-0.165,-0.16,-0.155,-0.15,-0.18,-0.205,-0.23,-0.235,-0.23,-0.225,-0.21,-0.23,-0.23,-0.225,-0.22,-0.205,-0.205,-0.215,-0.22,-0.235,-0.215,-0.21,-0.205,-0.215,-0.245,-0.225,-0.22,-0.215,-0.235,-0.275,-0.285,-0.275,-0.245,-0.195,-0.115,-0.025,0.115,0.3,0.515,0.71,0.86,0.9,0.835,0.645,0.385,0.085,-0.27,-0.555,-0.705,-0.69,-0.605,-0.545,-0.47,-0.435,-0.395,-0.375,-0.32,-0.295,-0.275,-0.275,-0.275,-0.265,-0.26,-0.24,-0.23,-0.235,-0.245,-0.24,-0.225,-0.21,-0.215,-0.225,-0.235,-0.225,-0.22,-0.19,-0.195,-0.2,-0.22,-0.21,-0.195,-0.18,-0.155,-0.16,-0.19,-0.17,-0.145,-0.12,-0.135,-0.125,-0.135,-0.125,-0.105,-0.07,-0.08,-0.07,-0.08,-0.07,-0.045,-0.025,-0.035,-0.03,-0.04,-0.025,0.005,0.03,0.045,0.035,0.035,0.05,0.065,0.08,0.085,0.075,0.06,0.085,0.1,0.115,0.11,0.11,0.095,0.085,0.09,0.11,0.1,0.095,0.06,0.055,0.045,0.065,0.055,0.035,0.02,0.015,0.005,0.01,-0.015,-0.035,-0.06,-0.085,-0.07,-0.075,-0.09,-0.11,-0.14,-0.15,-0.135,-0.125,-0.13,-0.145,-0.15,-0.15,-0.155,-0.135,-0.15,-0.175,-0.175,-0.18,-0.16,-0.145,-0.155,-0.175,-0.19,-0.185,-0.17,-0.155,-0.155,-0.175,-0.185,-0.2},
        {-0.255,-0.265,-0.28,-0.275,-0.25,-0.24,-0.23,-0.24,-0.27,-0.295,-0.275,-0.285,-0.265,-0.285,-0.27,-0.28,-0.275,-0.255,-0.245,-0.25,-0.26,-0.265,-0.28,-0.25,-0.26,-0.275,-0.265,-0.285,-0.28,-0.26,-0.255,-0.265,-0.255,-0.27,-0.265,-0.24,-0.245,-0.25,-0.255,-0.26,-0.255,-0.245,-0.235,-0.245,-0.255,-0.245,-0.25,-0.22,-0.23,-0.25,-0.255,-0.255,-0.25,-0.24,-0.23,-0.245,-0.255,-0.25,-0.25,-0.24,-0.22,-0.23,-0.24,-0.23,-0.23,-0.245,-0.23,-0.22,-0.23,-0.22,-0.2,-0.175,-0.165,-0.175,-0.2,-0.19,-0.165,-0.14,-0.09,-0.07,-0.06,-0.025,0.015,0.05,0.06,0.04,0.005,-0.015,-0.045,-0.05,-0.06,-0.07,-0.1,-0.11,-0.115,-0.125,-0.15,-0.215,-0.265,-0.265,-0.295,-0.3,-0.3,-0.31,-0.32,-0.325,-0.3,-0.295,-0.295,-0.295,-0.315,-0.33,-0.325,-0.305,-0.29,-0.285,-0.29,-0.29,-0.285,-0.265,-0.265,-0.27,-0.31,-0.37,-0.395,-0.35,-0.225,-0.065,0.12,0.305,0.465,0.545,0.445,0.21,-0.085,-0.28,-0.385,-0.4,-0.405,-0.385,-0.34,-0.295,-0.265,-0.255,-0.27,-0.275,-0.295,-0.3,-0.305,-0.295,-0.295,-0.28,-0.29,-0.275,-0.26,-0.245,-0.255,-0.27,-0.295,-0.285,-0.29,-0.275,-0.26,-0.26,-0.27,-0.29,-0.27,-0.275,-0.275,-0.28,-0.295,-0.285,-0.265,-0.245,-0.265,-0.265,-0.28,-0.295,-0.29,-0.275,-0.28,-0.3,-0.315,-0.32,-0.31,-0.315,-0.3,-0.3,-0.305,-0.315,-0.315,-0.295,-0.31,-0.31,-0.33,-0.34,-0.32,-0.315,-0.315,-0.305,-0.33,-0.32,-0.335,-0.31,-0.31,-0.31,-0.33,-0.32,-0.315,-0.305,-0.305,-0.32,-0.335,-0.335,-0.31,-0.3,-0.31,-0.32,-0.345,-0.36,-0.345,-0.335,-0.34,-0.36,-0.385,-0.395,-0.385,-0.36,-0.345,-0.355,-0.36,-0.375,-0.365,-0.35,-0.335,-0.335,-0.35,-0.36,-0.36,-0.345,-0.34,-0.34,-0.33,-0.325,-0.32,-0.31,-0.32,-0.325,-0.32,-0.325,-0.31,-0.31,-0.32,-0.335,-0.35,-0.33,-0.325,-0.3,-0.3,-0.3},
    };

    int[] y_test = {0,0,1,0,2,2,0,0,0,0};
    String[] class_name = {"N", "S", "V", "F", "Q"};

    int idx = -1;
    String modelFile="acharya__default_ovr_train__16-06-2020_11-30-10.tflite";
    Interpreter tflite;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        chart = findViewById(R.id.chart);
        tv1 = findViewById(R.id.tv1);
        tv2 = findViewById(R.id.tv2);

        try {
            tflite=new Interpreter(loadModelFile(MainActivity.this,modelFile));
        } catch (IOException e) {
            e.printStackTrace();
        }

        List<Hearbeat> beats = null;
        try {
            String csvfileString = this.getApplicationInfo().dataDir + File.separatorChar + "dataset/test__default_split__260.csv";
            beats = new CsvToBeanBuilder(new FileReader(csvfileString))
                    .withType(Hearbeat.class).build().parse();

            Log.v("TAG", "beats= " + beats.size());
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }



        nextSignal();
    }

    private List<float[]> convertToFloats(List<String[]> input){
        List<float[]> output = new ArrayList<>();

        for (int i=0; i < input.size(); i++){

        }
        return output;
    }

    public void nextBtn(View view) {
        nextSignal();
    }

    public void nextSignal() {
        Log.v("TAG", "index= " + idx + " / " + X_test.length);
        if (idx < X_test.length-1){
            idx++;
        } else {
            idx = 0;
        }


        TimingLogger timings = new TimingLogger("TAG", "classification");

        float[] signal = loadSignal(idx);
        float[][][] inp= {addDim(signal)};
        float[][] out=new float[][]{{0,0,0,0,0}};
        timings.addSplit("load signal");

        predict(inp, out);
        timings.addSplit("predict");

        Log.v("TAG", Arrays.deepToString((out)));

        int pred = getIndexOfLargest(out[0]);
        float proba = out[0][pred];
        timings.addSplit("get top 1");

        setData(signal);
        tv1.setText("Real: " + class_name[y_test[idx]] + " | Pred: " + class_name[pred]);
        tv2.setText("Confidence: " + (proba * 100) + "%");

        timings.addSplit("update UI");
        timings.dumpToLog();
    }

    public static float[][] addDim(float[] input){
        float[][] output = new float[input.length][1];
        for (int i=0; i < input.length; i++){
            output[i] = new float[]{input[i]};
        }

        return output;
    }

    public static float[] doublesToFloats(double[] input)
    {
        if (input == null)
        {
            return null; // Or throw an exception - your choice
        }
        float[] output = new float[input.length];
        for (int i = 0; i < input.length; i++)
        {
            output[i] = (float) input[i];
        }
        return output;
    }

    private float[] loadSignal(int idx){
        return doublesToFloats(X_test[idx]);
    }

    private void setData(float[] signal){
        ArrayList<Entry> values = new ArrayList<>();

        for (int i = 0; i < signal.length; i++) {
            values.add(new Entry(i, signal[i]));
        }



        LineDataSet set1;
        set1 = new LineDataSet(values, "DataSet 1");
        set1.setDrawCircles(false);
        set1.setColor(Color.BLACK);

        ArrayList<ILineDataSet> dataSets = new ArrayList<>();
        dataSets.add(set1); // add the data sets

        // create a data object with the data sets
        LineData data = new LineData(dataSets);

        // set data
        chart.animateY(100);
        chart.setData(data);
    }


    private void predict(float[][][] inp, float[][] out){
        tflite.run(inp,out);
    }



    public int getIndexOfLargest( float[] array )
    {
        if ( array == null || array.length == 0 ) return -1; // null or empty

        int largest = 0;
        for ( int i = 1; i < array.length; i++ )
        {
            if ( array[i] > array[largest] ) largest = i;
        }
        return largest; // position of the first largest found
    }

    private MappedByteBuffer loadModelFile(Activity activity, String MODEL_FILE) throws IOException {
        AssetFileDescriptor fileDescriptor = activity.getAssets().openFd(MODEL_FILE);
        FileInputStream inputStream = new FileInputStream(fileDescriptor.getFileDescriptor());
        FileChannel fileChannel = inputStream.getChannel();
        long startOffset = fileDescriptor.getStartOffset();
        long declaredLength = fileDescriptor.getDeclaredLength();
        return fileChannel.map(FileChannel.MapMode.READ_ONLY, startOffset, declaredLength);
    }
}